// Returns a random DNA base
const returnRandBase = () => {
    const dnaBases = ['A', 'T', 'C', 'G']
    return dnaBases[Math.floor(Math.random() * 4)] 
  }
  
  // Returns a random single stand of DNA containing 15 bases
  const mockUpStrand = () => {
    const newStrand = []
    for (let i = 0; i < 15; i++) {
      newStrand.push(returnRandBase())
    }
    return newStrand
  }
  const pAequorFactory = (specimenNum, dna) => {
  return {
    specimenNum: specimenNum,
    dna: dna,
    mutate() { 
      let randInt = Math.floor(Math.random() * 15)
      let mutatedDna = dna;
      let randbase = returnRandBase()
      while (this.mutatedDna[randInt] === randbase) {
          randbase = returnRandBase();
          
     }
      mutatedDna[randInt] = randbase;
      return mutatedDna
    },
    
    compare(pAqour) {
      
      let total = 0;
      for(i = 0; i < this.dna.length; i++) {
         if (this.dna[i] === pAqour.dna[i]) {
            total++
          }
        
      } let commonPer = (total / 15) * 100;
      return `These Species have ${commonPer.toFixed()}% of their DNA in common.`
    },
    
    willLikelySurvive() {
      const cOrG = this.dna.filter(el => el === "C" || el === "G");
      return cOrG.length/ this.dna.length >= 0.6;
      } 
    }
  }
  
const survivingSpecimen = [];
let specID = 1;

while(survivingSpecimen.length < 30) {
  let spec = pAequorFactory(specID, mockUpStrand());
  if (spec.willLikelySurvive()) {
    survivingSpecimen.push(spec)
  }
  specID++
}
// prints the 30 surviving specimen   
  console.log(survivingSpecimen)
